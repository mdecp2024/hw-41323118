var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://github.com/mdecp2024/hw-41323118 \n 個人網站: https://mdecp2024.github.io/hw-41323118/ \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': 'Brython建立 \n \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '題目一: 請利用 程式一 的原始碼, 分別在自己網站的 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行 \n \n \xa0\xa0 \n 題目二: 請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"( Keywords )有關係嗎? 請實際舉例, 針對 Python 程式命名的規則編寫程式, 並採上一題的五種程式執行方法, 展示正確變數命名與違反變數命名時, 所顯示的錯誤訊息回應 \n \n \xa0 \n 題目三: \xa0 http://mde.tw/cp2024/content/Problem_set.html \xa0中有利用 Python 程式解決物理與微積分的範例流程, 請根據過程中所得到的 Python 程式, 利用題目一中的五種方法執行 \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '\n 題目一: \n \n 這次藉由chat gpt的幫助完成了任務,中間忘記了題目上的提示而NG了一次 \n \n 題目二: \n \n 基本上操作與W11-1相同 但感覺畫圓的程式碼公式可記下來之後有機會使用到 \n \n 程式碼:   W11-1   W11-2 \n 總體心得: 由於是先做了之後的內容再回來做的,這兩題的題目體感上較簡單,但話雖這麼說,少了AI的幫助或許會花很久的時間... \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': "第一題-Strings, input() and print()字串, 輸入及打印 \n Strings: \xa0 任何在引號之中的都為 string(字串) \n ex:\xa0 這是個字串 \n 備註:只有字串的程式碼將不會輸出任何東西 \n Input: \xa0 在使用Brython之中的 input(輸入) 時會跳出詢問窗 \n ex:\xa0 你的名字&你來自哪裡 \n Print: \xa0 這個指令如其名 print(打印) ,作用為印出 string(字串) ,可印出文字或排列成圖形 \n ex: \xa0 打印小貓 \n 備註:由於Brython中此指令印出會有所偏移,因故將程式碼調整 \n \xa0 \n 第二題-Variables變數 \n First name&Last name: \xa0 將變數設定為名稱與姓氏,再將其 print(打印) \n ex:  名稱與姓氏 \n What is your favorite food:  結合 print(打印) 和 input(輸入) ,將輸入之值作為 string(字串) 列出 \n ex:  你最愛的食物是什麼? \n \xa0 \n 第三題-If... in... else...假如...否則... \n In\xa0a bookstore:  利用 if判斷式 ,判斷所選書籍是否有在販售 \n ex:  在書店裡 \n \xa0 \n 第四題 - Append(), remove()附加和消除 \n Grocery shopping:  使用 a ppend(附加) 在清單中加入第一次 輸入 之答案,並使用 remove(消除) 在清單中移除第二次 輸入 之答案 \n ex:  購物清單 \n \xa0備註:結合if判斷式偵測第二次之答案是否在清單內,若無則不變 \n \xa0 \n 第五題-Index(), pop() and insert()列表查找, 移出與插入 \n Customizing the burger menu:\xa0 index (索引) 可以用來搜尋列表中指定字元的位置,與 pop 結合,可 删除特定列表項目,而與 insert(插入) 結合,可 在指定的索引處向列表中插入一个項目\xa0 \n 利用這些指令,達到在菜單上新增與移除品項 \n ex:  漢堡店菜單 \n \xa0 \n 第六題-Slicing切片 \n Traveling around the world: 設定好變數及字串,使用 方括號[ ] 將字串切片,輸出各式不同的值 \n ex:  環遊世界 \n \xa0 \n 第七題-Slicing use切片應用 \n Senses, planets, and a house: \xa0 延伸第六題的切片,應用更多情況 \n ex:  感官星球與房屋 \n \xa0 \n 第八題-For() range迴圈1 \n My friend's favorite dishes:  for迴圈 使我們可以重複執行一組指令 , 直到達到特定的條件為止,而 range 則是用來生成一個包含一系列數字的有序序列 \n 利用以上兩個新的指令, 在每次循環中依次列出朋友與菜餚 \n ex:  我朋友們最喜歡的菜餚 \n \xa0 \n 第九題-For() loop if...迴圈2 \n At the zoo:  延伸 for迴圈 的應用,加上 if判斷式 用以 條件判斷 \n ex:  動物園之中 \n \xa0 \n 第十題-For() search迴圈搜索 \n Where are my gloves?:  搜索 表中的每個項目，並對每個項目執行特定的動作 \n ex:  裝備清點 \n \n", 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '\n 題目: 請在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. 操作過程請拍攝影片, 並在頁面中列出作業心得. \n 影片: \n \n 程式碼 \n \n 心得: 在多次嘗試後,竟然一次除錯都沒有的完美下達指令,讓我理解雖然Ai時常接收指令出錯,導致需要多次試錯才能得到理想的答案,但只要改變下達指令的用詞,或許就可以省很多時間,避免Ai誤解指令的尷尬狀況 \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '題目: 以下為參考範例的詳細說明, 請根據此一程式架構, 修改為三個圓的區域塗色任務. \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n 105 \n 106 \n 107 \n \n \n \n from   browser  import   html \n from   browser  import   document as doc \n import   random \n import   math \n \xa0 \n # 定義一個函式來初始化畫布 \n def   initialize_canvas(canvas_width = 400 , canvas_height = 400 ,  id = "brython_div1" ): \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。 \n \xa0\xa0\xa0\xa0 返回畫布元素和它的 2D 繪圖上下文。 \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 # 創建一個 canvas 元素，並設置其寬度與高度 \n \xa0\xa0\xa0\xa0 canvas  =   html.CANVAS(width = canvas_width, height = canvas_height) \n \xa0\xa0\xa0\xa0 # 將創建的 canvas 元素添加到指定的 HTML div 元素中 \n \xa0\xa0\xa0\xa0 brython_div  =   doc[ id ]\xa0  # 獲取指定 id 的 div 元素 \n \xa0\xa0\xa0\xa0 brython_div < =   canvas\xa0  # 將 canvas 插入到該 div 中 \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口 \n \xa0\xa0\xa0\xa0 ctx  =   canvas.getContext( "2d" ) \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 # 返回畫布和它的 2D 繪圖上下文 \n \xa0\xa0\xa0\xa0 return   canvas, ctx \n \xa0 \n # 定義一個隨機顏色生成函式 \n def   random_color_generator(): \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 生成一個隨機的 RGB 顏色字符串。 \n \xa0\xa0\xa0\xa0 返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。 \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 r  =   random.randint( 0 ,  255 )\xa0  # 隨機生成紅色成分 (0-255) \n \xa0\xa0\xa0\xa0 g  =   random.randint( 0 ,  255 )\xa0  # 隨機生成綠色成分 (0-255) \n \xa0\xa0\xa0\xa0 b  =   random.randint( 0 ,  255 )\xa0  # 隨機生成藍色成分 (0-255) \n \xa0\xa0\xa0\xa0 return   f "rgb({r}, {g}, {b})" \xa0  # 返回隨機顏色字符串 \n \xa0 \n # 判斷點 (px, py) 是否在圓內 \n def   is_point_in_circle(px, py, cx, cy, r): \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。 \n \xa0\xa0\xa0\xa0 (cx, cy) 為圓心坐標，r 為圓的半徑。 \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 # 使用圓的方程 (px - cx)² + (py - cy)² <= r² 判斷點是否在圓內 \n \xa0\xa0\xa0\xa0 return   (px  -   cx)  * *   2   +   (py  -   cy)  * *   2   < =   r  * *   2 \n \xa0 \n # 使用者設定的圓心座標和半徑，並進行掃描線填充 \n def   draw_circles(x1, y1, r1, x2, y2, r2): \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 根據傳入的兩個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。 \n \xa0\xa0\xa0\xa0 x1, y1, r1 是圓1的圓心坐標和半徑 \n \xa0\xa0\xa0\xa0 x2, y2, r2 是圓2的圓心坐標和半徑 \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 # 初始化畫布，創建並取得畫布和其 2D 上下文 \n \xa0\xa0\xa0\xa0 canvas, ctx  =   initialize_canvas( 400 ,  400 ) \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 # 清空畫布，以便重新繪製 \n \xa0\xa0\xa0\xa0 ctx.clearRect( 0 ,  0 , canvas.width, canvas.height) \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 # 顏色區域存儲字典，存儲不同區域的顏色 \n \xa0\xa0\xa0\xa0 color_dict  =   {} \n \xa0 \n \xa0\xa0\xa0\xa0 # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素 \n \xa0\xa0\xa0\xa0 for   py  in   range ( 0 , canvas.height):\xa0  # 遍歷每一行的 y 坐標 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   None \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 遍歷當前行中的每個像素點 (px, py) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   px  in   range ( 0 , canvas.width):\xa0  # 遍歷每一列的 x 坐標 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 判斷該點是否在圓1內 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 in_circle1  =   is_point_in_circle(px, py, x1, y1, r1) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 判斷該點是否在圓2內 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 in_circle2  =   is_point_in_circle(px, py, x2, y2, r2) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   in_circle1  and   in_circle2: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果點同時在兩個圓內，則是交集區域 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   "intersection"   not   in   color_dict: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 color_dict[ "intersection" ]  =   random_color_generator() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 設置當前掃描線的顏色為交集區域的顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   color_dict[ "intersection" ] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 elif   in_circle1: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果點只在圓1內，則是圓1的區域 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   "circle1"   not   in   color_dict: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果還沒有為圓1分配顏色，則分配一個隨機顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 color_dict[ "circle1" ]  =   random_color_generator() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 設置當前掃描線的顏色為圓1區域的顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   color_dict[ "circle1" ] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 elif   in_circle2: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果點只在圓2內，則是圓2的區域 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   "circle2"   not   in   color_dict: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果還沒有為圓2分配顏色，則分配一個隨機顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 color_dict[ "circle2" ]  =   random_color_generator() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 設置當前掃描線的顏色為圓2區域的顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   color_dict[ "circle2" ] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果點不在任何圓內，則是背景區域 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   "white" \xa0  # 背景色設為白色 \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 設置當前像素的顏色並進行填充 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ctx.fillStyle  =   current_color \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ctx.fillRect(px, py,  1 ,  1 )\xa0  # 填充一個像素 \n \xa0 \n # 直接設定圓心和半徑 \n x1, y1, r1  =   150 ,  200 ,  100 \xa0  # 圓1：圓心 (150, 200)，半徑 100 \n x2, y2, r2  =   250 ,  200 ,  100 \xa0  # 圓2：圓心 (250, 200)，半徑 100 \n \xa0 \n # 呼叫畫圓函式，並繪製兩個圓 \n draw_circles(x1, y1, r1, x2, y2, r2) \n \n \n \n \n \n \xa0 \n 以下是三個圓的區域塗色: \n 三個圓的區域塗色程式 \n 輸出的結果將是隨機上色,所以每一次的結果都有所不同(如下) \n \n \n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w15_hw', 'text': '題目一:  請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式. \n 從 1 累加到 100 \n 題目二: \xa0延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題) \n addto \n 題目三: \xa0延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果, 但只納入偶數. 頁面中請以\xa0add_only_even 作為連結標題. \n add_only_even \n 題目四: \xa0延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數,\xa0頁面中請以\xa0add_avoid_8 作為連結標題.', 'tags': '', 'url': 'w15_hw.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '\n 程式碼 \n \n \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w16_exam2', 'text': '\n 程式碼 \n \n \n \n \n \n \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'w16_exam3', 'text': '\n 程式碼 \n \n \n', 'tags': '', 'url': 'w16_exam3.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \n \n \n \n \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};